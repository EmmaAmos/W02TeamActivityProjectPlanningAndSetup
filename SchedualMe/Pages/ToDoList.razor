@page "/ToDoList"
@using SchedualMe.Models 
@inject ITaskService TaskService 
@using System.Linq

@code {

    private SchdeualModel? TaskToEdit;
    private List<SchdeualModel> Tasks = new List<SchdeualModel>();
    private SchdeualModel NewTask = new SchdeualModel(); 

    protected override async Task OnInitializedAsync()
    {
        Tasks = await TaskService.GetAllTasksAsync();
    }

    private async Task AddTask()
    {
        if (!string.IsNullOrWhiteSpace(NewTask.Title))
        {
            // Ensure NewTask is set to not complete by default (it is in the model, but good practice)
            NewTask.IsComplete = false;
            await TaskService.AddTaskAsync(NewTask);

            // Reload the list and reset the form
            Tasks = await TaskService.GetAllTasksAsync();
            NewTask = new SchdeualModel(); 
        }
    }

    private async Task DeleteTask(SchdeualModel itemToDelete)
    {
        await TaskService.DeleteTaskAsync(itemToDelete.Id);
        // Remove item from the local list to avoid another full fetch
        Tasks.Remove(itemToDelete); 
    }
    
    private async Task ToggleComplete(SchdeualModel task)
    {
        // Invert status, update DB, no need to refresh the whole list
        task.IsComplete = !task.IsComplete;
        await TaskService.UpdateTaskAsync(task);
    }
    private void SetTaskToEdit(SchdeualModel task)
{
    // Sets the local variable to the task being edited
    TaskToEdit = task; 
}

    private async Task SaveTaskEdit()
    {
        if (TaskToEdit != null && !string.IsNullOrWhiteSpace(TaskToEdit.Title))
        {
            // 1. Call the service's Update method
            await TaskService.UpdateTaskAsync(TaskToEdit);
            
            // 2. Clear the edit state
            TaskToEdit = null;
            
            // No need to fetch the list again since we updated the reference
        }
    }
}

<h1>SchedualMe: My To-Do List</h1>

<h2>Add New Task</h2>
<input @bind="NewTask.Title" placeholder="What needs to be done?" />
<input @bind="NewTask.Description" placeholder="Optional description..." />
<button @onclick="AddTask">Add Task</button>

<table class="table mt-4">
    <thead>
        <tr>
            <th>Complete</th>
            <th>Title</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
    </thead>
<tbody>
    @foreach (var task in Tasks.OrderByDescending(t => !t.IsComplete))
    {
        // Check if the current task is the one we are editing
        bool isEditing = task == TaskToEdit;

        <tr>
            <td>
                <input type="checkbox" @bind="task.IsComplete" 
                       @onchange="() => ToggleComplete(task)" 
                       disabled="@isEditing" />
            </td>
            <td>
                @if (isEditing)
                {
                    // EDIT MODE: Input field for Title
                    <input @bind="task.Title" class="form-control" />
                }
                else
                {
                    // DISPLAY MODE: Static text
                    <span style="@(task.IsComplete ? "text-decoration: line-through;" : "")">
                        @task.Title
                    </span>
                }
            </td>
            <td>
                @if (isEditing)
                {
                    // EDIT MODE: Input field for Description
                    <input @bind="task.Description" class="form-control" />
                }
                else
                {
                    // DISPLAY MODE: Static text
                    @task.Description
                }
            </td>
            <td>
                @if (isEditing)
                {
                    // EDIT MODE: Save and Cancel buttons
                    <button class="btn btn-success btn-sm me-2" @onclick="SaveTaskEdit">Save</button>
                    <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancel</button>
                }
                else
                {
                    // DISPLAY MODE: Edit and Delete buttons
                    <button class="btn btn-info btn-sm me-2" @onclick="() => SetTaskToEdit(task)">Edit</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteTask(task)">Delete</button>
                }
            </td>
        </tr>
    }
</tbody>
</table>

@if (Tasks.Count == 0)
{
    <p class="mt-4"><em>No tasks found. Get started by adding a task above!</em></p>
}