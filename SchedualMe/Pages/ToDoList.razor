@page "/ToDoList"
@using SchedualMe.Models 
@inject ITaskService TaskService 
@using System.Linq

@code {
    private List<SchdeualModel> Tasks = new List<SchdeualModel>();
    private SchdeualModel NewTask = new SchdeualModel(); 

    protected override async Task OnInitializedAsync()
    {
        Tasks = await TaskService.GetAllTasksAsync();
    }

    private async Task AddTask()
    {
        if (!string.IsNullOrWhiteSpace(NewTask.Title))
        {
            // Ensure NewTask is set to not complete by default (it is in the model, but good practice)
            NewTask.IsComplete = false;
            await TaskService.AddTaskAsync(NewTask);

            // Reload the list and reset the form
            Tasks = await TaskService.GetAllTasksAsync();
            NewTask = new SchdeualModel(); 
        }
    }

    private async Task DeleteTask(SchdeualModel itemToDelete)
    {
        await TaskService.DeleteTaskAsync(itemToDelete.Id);
        // Remove item from the local list to avoid another full fetch
        Tasks.Remove(itemToDelete); 
    }
    
    private async Task ToggleComplete(SchdeualModel task)
    {
        // Invert status, update DB, no need to refresh the whole list
        task.IsComplete = !task.IsComplete;
        await TaskService.UpdateTaskAsync(task);
    }
}

<h1>SchedualMe: My To-Do List</h1>

<h2>Add New Task</h2>
<input @bind="NewTask.Title" placeholder="What needs to be done?" />
<input @bind="NewTask.Description" placeholder="Optional description..." />
<button @onclick="AddTask">Add Task</button>

<table class="table mt-4">
    <thead>
        <tr>
            <th>Complete</th>
            <th>Title</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
     @foreach (var task in Tasks.OrderByDescending(t => !t.IsComplete))
    {
        <tr>
            <td>
                <input type="checkbox" @bind="task.IsComplete" @onchange="() => ToggleComplete(task)" />
            </td>
            <td>
                <span style="@(task.IsComplete ? "text-decoration: line-through;" : "")">
                    @task.Title
                </span>
            </td>
            <td>@task.Description</td>
            <td>
                <button class="btn btn-danger btn-sm" @onclick="() => DeleteTask(task)">Delete</button>
            </td>
        </tr>
    }
    </tbody>
</table>

@if (Tasks.Count == 0)
{
    <p class="mt-4"><em>No tasks found. Get started by adding a task above!</em></p>
}