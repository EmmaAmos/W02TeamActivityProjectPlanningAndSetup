@page "/ToDoList"
@*The word "temple" keeps apearing between page and /todolit. No mater what I do, the word keeps appearing and wont go away. It's stopping me from building or running my app*@
@using SchedualMe.Models
@using System.Linq
@using System.Security.Claims

@using Microsoft.AspNetCore.Authorization @* <-- Needed for [Authorize] *@
@using Microsoft.AspNetCore.Components.Authorization @* <-- Needed for AuthenticationStateProvider *@

@inject ITaskService TaskService 

@attribute [Authorize] 
@inject AuthenticationStateProvider AuthenticationStateProvider

@code {

    private SchedualModel? TaskToEdit;
    private List<SchedualModel> Tasks = new List<SchedualModel>();
    private SchedualModel NewTask = new SchedualModel();
    private string CurrentUserId = string.Empty; // Holds the ID of the logged-in user

    // Add a CancelEdit method for good UI practice
    private void CancelEdit()
    {
        TaskToEdit = null;
    }

    protected override async Task OnInitializedAsync()
    {
        // 2. Retrieve the Authentication State
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // 3. Get the User ID
        if (user.Identity?.IsAuthenticated == true)
        {
            // The ClaimTypes.NameIdentifier holds the unique Identity ID (the GUID string)
            CurrentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;

            // Load tasks ONLY if we have a valid user ID
            if (!string.IsNullOrEmpty(CurrentUserId))
            {
                await LoadTasks();
            }
        }
    }

    // Helper method to consolidate task fetching logic
    private async Task LoadTasks()
    {
        // 4. Update the service call to pass the userId
        Tasks = await TaskService.GetAllTasksAsync(CurrentUserId);
    }

    private async Task AddTask()
    {
        if (!string.IsNullOrWhiteSpace(NewTask.Title) && !string.IsNullOrEmpty(CurrentUserId))
        {
            NewTask.IsComplete = false;
            
            // 5. Update the service call to pass the userId
            await TaskService.AddTaskAsync(CurrentUserId, NewTask);

            // Reload the list and reset the form
            await LoadTasks(); 
            NewTask = new SchedualModel(); 
        }
    }

    private async Task DeleteTask(SchedualModel itemToDelete)
    {
        // 6. Update the service call to pass the userId
        await TaskService.DeleteTaskAsync(CurrentUserId, itemToDelete.Id);
        
        // Remove item from the local list
        Tasks.Remove(itemToDelete); 
    }
    
    private async Task ToggleComplete(SchedualModel task)
    {
        if (!string.IsNullOrEmpty(CurrentUserId))
        {
            // We can directly call UpdateTaskAsync (or MarkAsCompleteAsync if we use that)
            task.IsComplete = !task.IsComplete;
            
            // 7. Update the service call to pass the userId
            await TaskService.UpdateTaskAsync(CurrentUserId, task);
        }
    }
    
    private void SetTaskToEdit(SchedualModel task)
    {
        TaskToEdit = task; 
    }

    private async Task SaveTaskEdit()
    {
        if (TaskToEdit != null && !string.IsNullOrWhiteSpace(TaskToEdit.Title) && !string.IsNullOrEmpty(CurrentUserId))
        {
            // 8. Update the service call to pass the userId
            await TaskService.UpdateTaskAsync(CurrentUserId, TaskToEdit);
            
            // Clear the edit state
            TaskToEdit = null;
        }
    }
}

@* Everything below this line (the HTML/Razor markup) remains the same *@

<h1>SchedualMe: My To-Do List</h1>